call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-dispatch'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'kien/rainbow_parentheses.vim'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'jparise/vim-graphql'
Plug 'vim-test/vim-test'
Plug 'Quramy/tsuquyomi'
Plug 'dense-analysis/ale'
Plug 'cormacrelf/vim-colors-github'
call plug#end()

syntax on
filetype plugin indent on

" Insert space instead of tab
:set expandtab
:set tabstop=4
:set shiftwidth=4

" In JavaScript and TypeScript files, use 2 spaces
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType typescript setlocal shiftwidth=2 tabstop=2

" In Ruby files, use 2 spaces
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2

" Colorscheme
set background=light
colorscheme github

" Syntax highlighting for .ts files
au BufRead,BufNewFile *.ts   setfiletype typescript

" Refresh every 100ms
set updatetime=100

" Show line numbers
set number

" Highlight cursor line
set cursorline

" Enable Ruby syntax for common files without extensions
au BufReadPost Appfile set syntax=ruby
au BufReadPost Brewfile set syntax=ruby
au BufReadPost Fastfile set syntax=ruby
au BufReadPost Gemfile set syntax=ruby
au BufReadPost Podfile set syntax=ruby

" Autofix
let b:ale_fixers = ['prettier', 'eslint']
let g:ale_fix_on_save = 1

" Enable rainbow parentheses
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" Map ctrl+s to save
:inoremap <c-s> <Esc>:Update<CR>

" Open NERDTree with ctrl+n
map <C-n> :NERDTreeToggle<CR>

" Open NERDTree on startup if no file specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Map changing window pane to ctrl+j, ctrl+k, ctrl+l, ctrl+h
" instead of ctrl+w and then a direction.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Run tests asynchronously
let test#strategy = "dispatch"

" Add function to format JSON
com! FormatJSON %!python -m json.tool

